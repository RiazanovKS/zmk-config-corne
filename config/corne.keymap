/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans     &kp Q               &kp W           &kp E               &kp R             &kp T        &kp Y        &kp U            &kp I               &kp O           &kp P                  &kp LEFT_BRACKET
&kp LCTRL  &mt LEFT_COMMAND A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G        &kp H        &mt LSHFT J      &mt LEFT_CONTROL K  &mt LEFT_ALT L  &mt LEFT_COMMAND SEMI  &kp SQT
&kp LSHFT  &kp Z               &kp X           &kp C               &kp V             &kp B        &kp N        &kp M            &kp COMMA           &kp DOT         &kp FSLH               &kp RIGHT_BRACKET
                                               &lt 6 ESCAPE        &lt 2 SPACE       &lt 4 TAB    &lt 5 ENTER  &lt 1 BACKSPACE  &lt 3 DELETE
            >;
        };

        number_layer {
            bindings = <
&trans  &kp PERCENT  &kp N7  &kp N8            &kp N9  &kp CARET    &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp DOLLAR   &kp N4  &kp N5            &kp N6  &kp EQUAL    &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp AT_SIGN  &kp N1  &kp N2            &kp N3  &kp FSLH     &trans  &trans     &trans     &trans    &trans    &trans
                             &kp GREATER_THAN  &kp N0  &kp GRAVE    &trans  &trans     &trans
            >;
        };

        symbol_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &kp EXCL   &kp HASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND  &kp BACKSLASH
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp MINUS  &kp EQUAL      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE      &kp PIPE
&trans  &trans    &trans    &trans     &trans     &trans    &kp UNDER  &kp PLUS       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE      &kp STAR
                            &trans     &trans     &trans    &trans     &kp LESS_THAN  &kp GREATER_THAN
            >;
        };

        functional_layer {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8   &kp F9     &kp PRINTSCREEN    &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5   &kp F6     &kp SCROLLLOCK     &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2   &kp F3     &kp PAUSE_BREAK    &trans  &trans     &trans     &trans    &trans    &trans
                         &kp ESC  &kp SPACE  &kp TAB            &trans  &trans     &trans
            >;
        };

        navigation_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &kp K_REDO      &kp K_PASTE     &kp K_COPY     &kp K_CUT        &kp K_UNDO    &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT_ARROW  &kp CAPSLOCK  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &kp INSERT      &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP      &kp END       &trans
                            &trans     &trans     &trans    &kp ENTER       &kp BSPC        &kp DELETE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        media_layer {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans      &kp K_PASTE  &kp K_COPY         &kp K_CUT        &kp K_UNDO    &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans      &trans       &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp CAPSLOCK  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &kp INSERT  &kp HOME     &kp PAGE_DOWN      &kp PAGE_UP      &kp END       &trans
                            &trans     &trans     &trans    &kp ENTER   &kp BSPC     &kp C_MUTE
            >;
        };
    };
};
